import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework._6WXoDa9.js";const u=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"src/guide/core/eps.md","filePath":"src/guide/core/eps.md","lastUpdated":1721787695000}'),t={name:"src/guide/core/eps.md"},p=e(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>传统的开发流程：</p><ul><li>后端创建表，写 API 接口；</li><li>编写 API 接口文档；</li><li>前端根据 API 接口文档，编写对应的调用接口的方法；</li><li>前端使用到的地方调用接口；</li></ul><p>那为何不能直接让前端去感知后端有什么接口，然后直接调用呢？为什么非得这么绕...</p><p>难道不需要时间摸鱼、交女朋友吗...哈哈哈</p><p>因此 Eps 主要解决的就是这个问题</p><p>后台创建 API 接口，前端用到的地方直接调用， 还有提示！！！ 另外一个 Eps 因为扫描了后端的接口和数据信息，这些信息可以用来快速生成 CRUD 界面，又省了很多事。。。爽~~~~</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>配置文件<code>src/config/config.local.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 实体与路径，跟生成代码、前端请求、注意：线上不建议开启，以免暴露敏感信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    eps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>线上不建议开启，以免暴露敏感信息</p><p>基于此原理，本地开发的时候前端要想正常请求接口，必须先启动后端，前端扫描完之后会生成<code>eps.json</code></p><p>如果是自动化部署的时候，务必先生成过一次<code>eps.json</code>，否则将无法正常访问接口</p></div>`,11),l=[p];function n(c,o,d,r,h,k){return i(),a("div",null,l)}const g=s(t,[["render",n]]);export{u as __pageData,g as default};
